{"version":3,"file":"1-timer.js","sources":["../src/js/1-timer.js"],"sourcesContent":["import flatpickr from 'flatpickr';\nimport 'flatpickr/dist/flatpickr.min.css';\nimport iziToast from 'izitoast';\nimport 'izitoast/dist/css/iziToast.min.css';\n\nconst startBtn = document.querySelector('[data-start]');\nconst dateTimePicker = document.querySelector('#datetime-picker');\nconst daysEl = document.querySelector('[data-days]');\nconst hoursEl = document.querySelector('[data-hours]');\nconst minutesEl = document.querySelector('[data-minutes]');\nconst secondsEl = document.querySelector('[data-seconds]');\n\nlet userSelectedDate = null;\nlet countdownInterval = null;\n\nconst addLeadingZero = value => String(value).padStart(2, '0');\n\nconst options = {\n  enableTime: true,\n  time_24hr: true,\n  defaultDate: new Date(),\n  minuteIncrement: 1,\n  onClose(selectedDates) {\n    const selectedDate = selectedDates[0];\n    if (selectedDate <= new Date()) {\n      startBtn.disabled = true;\n      iziToast.error({ message: 'Please choose a date in the future' });\n    } else {\n      startBtn.disabled = false;\n      userSelectedDate = selectedDate;\n    }\n  },\n};\n\nflatpickr(dateTimePicker, options);\n\nconst convertMs = ms => {\n  const second = 1000;\n  const minute = second * 60;\n  const hour = minute * 60;\n  const day = hour * 24;\n\n  const days = Math.floor(ms / day);\n  const hours = Math.floor((ms % day) / hour);\n  const minutes = Math.floor(((ms % day) % hour) / minute);\n  const seconds = Math.floor((((ms % day) % hour) % minute) / second);\n\n  return { days, hours, minutes, seconds };\n};\n\nconst updateTimerDisplay = time => {\n  daysEl.textContent = addLeadingZero(time.days);\n  hoursEl.textContent = addLeadingZero(time.hours);\n  minutesEl.textContent = addLeadingZero(time.minutes);\n  secondsEl.textContent = addLeadingZero(time.seconds);\n};\n\nconst startTimer = () => {\n  startBtn.disabled = true;\n  dateTimePicker.disabled = true;\n\n  countdownInterval = setInterval(() => {\n    const now = new Date();\n    const timeLeft = userSelectedDate - now;\n\n    if (timeLeft <= 0) {\n      clearInterval(countdownInterval);\n      updateTimerDisplay({ days: 0, hours: 0, minutes: 0, seconds: 0 });\n      dateTimePicker.disabled = false;\n      return;\n    }\n\n    updateTimerDisplay(convertMs(timeLeft));\n  }, 1000);\n};\n\nstartBtn.addEventListener('click', startTimer);\n"],"names":["startBtn","dateTimePicker","daysEl","hoursEl","minutesEl","secondsEl","userSelectedDate","countdownInterval","addLeadingZero","value","options","selectedDates","selectedDate","iziToast","flatpickr","convertMs","ms","days","hours","minutes","seconds","updateTimerDisplay","time","startTimer","timeLeft"],"mappings":"+IAKA,MAAMA,EAAW,SAAS,cAAc,cAAc,EAChDC,EAAiB,SAAS,cAAc,kBAAkB,EAC1DC,EAAS,SAAS,cAAc,aAAa,EAC7CC,EAAU,SAAS,cAAc,cAAc,EAC/CC,EAAY,SAAS,cAAc,gBAAgB,EACnDC,EAAY,SAAS,cAAc,gBAAgB,EAEzD,IAAIC,EAAmB,KACnBC,EAAoB,KAExB,MAAMC,EAAiBC,GAAS,OAAOA,CAAK,EAAE,SAAS,EAAG,GAAG,EAEvDC,EAAU,CACd,WAAY,GACZ,UAAW,GACX,YAAa,IAAI,KACjB,gBAAiB,EACjB,QAAQC,EAAe,CACrB,MAAMC,EAAeD,EAAc,CAAC,EAChCC,GAAgB,IAAI,MACtBZ,EAAS,SAAW,GACpBa,EAAS,MAAM,CAAE,QAAS,oCAAsC,CAAA,IAEhEb,EAAS,SAAW,GACpBM,EAAmBM,EAEtB,CACH,EAEAE,EAAUb,EAAgBS,CAAO,EAEjC,MAAMK,EAAYC,GAAM,CAMtB,MAAMC,EAAO,KAAK,MAAMD,EAAK,KAAG,EAC1BE,EAAQ,KAAK,MAAOF,EAAK,MAAO,IAAI,EACpCG,EAAU,KAAK,MAAQH,EAAK,MAAO,KAAQ,GAAM,EACjDI,EAAU,KAAK,MAASJ,EAAK,MAAO,KAAQ,IAAU,GAAM,EAElE,MAAO,CAAE,KAAAC,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,CAAO,CACxC,EAEMC,EAAqBC,GAAQ,CACjCpB,EAAO,YAAcM,EAAec,EAAK,IAAI,EAC7CnB,EAAQ,YAAcK,EAAec,EAAK,KAAK,EAC/ClB,EAAU,YAAcI,EAAec,EAAK,OAAO,EACnDjB,EAAU,YAAcG,EAAec,EAAK,OAAO,CACrD,EAEMC,EAAa,IAAM,CACvBvB,EAAS,SAAW,GACpBC,EAAe,SAAW,GAE1BM,EAAoB,YAAY,IAAM,CAEpC,MAAMiB,EAAWlB,EADL,IAAI,KAGhB,GAAIkB,GAAY,EAAG,CACjB,cAAcjB,CAAiB,EAC/Bc,EAAmB,CAAE,KAAM,EAAG,MAAO,EAAG,QAAS,EAAG,QAAS,CAAC,CAAE,EAChEpB,EAAe,SAAW,GAC1B,MACD,CAEDoB,EAAmBN,EAAUS,CAAQ,CAAC,CACvC,EAAE,GAAI,CACT,EAEAxB,EAAS,iBAAiB,QAASuB,CAAU"}